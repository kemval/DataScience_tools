setwd("~/Desktop/Data_science_tools/week03")
# Check for categorical variables and encode them
if("factor" %in% sapply(customers, class)){
customers$Genre <- as.numeric(as.factor(customers$Genre))
}
# Visualize the distribution of Spending Score
ggplot(customers, aes(x = `Spending Score (1-100)`)) +
geom_histogram(bins = 20, fill = "blue", color = "black") +
ggtitle("Distribution of Spending Score") +
xlab("Spending Score") +
ylab("Frequency")
# Compare the distribution of Annual Income across different Genres
ggplot(customers, aes(x = as.factor(Genre), y = `Annual Income (k$)`, fill = as.factor(Genre))) +
geom_boxplot() +
ggtitle("Comparison of Annual Income across Genres") +
xlab("Genre") +
ylab("Annual Income (k$)")
# Load necessary libraries
library(tidyverse)
# Load the dataset
customers <- read.csv("Mall_Customers.csv")
# Display the first 5 rows
print(head(customers, 5))
# Calculate the number of missing values
num_missing_values <- sum(is.na(customers))
# Output the number of missing values with a message
print(paste("Number of missing values:", num_missing_values))
# Check for categorical variables and encode them
if("factor" %in% sapply(customers, class)){
customers$Genre <- as.numeric(as.factor(customers$Genre))
}
# Create Age_Category based on age groups
customers$Age_Category <- cut(customers$Age,
breaks = c(-Inf, 30, 40, 50, Inf),
labels = c("0-30", "31-40", "41-50", "50+"))
# Visualize the distribution of Spending Score
ggplot(customers, aes(x = `Spending Score (1-100)`)) +
geom_histogram(bins = 20, fill = "blue", color = "black") +
ggtitle("Distribution of Spending Score") +
xlab("Spending Score") +
ylab("Frequency")
# Create Age_Category based on age groups
customers$Age_Category <- cut(customers$Age,
breaks = c(-Inf, 30, 40, 50, Inf),
labels = c("0-30", "31-40", "41-50", "50+"))
# Load necessary libraries
library(tidyverse)
# Load the dataset
customers <- read.csv("Mall_Customers.csv")
# Display the first 5 rows
print(head(customers, 5))
# Calculate the number of missing values
num_missing_values <- sum(is.na(customers))
# Output the number of missing values with a message
print(paste("Number of missing values:", num_missing_values))
# Check for categorical variables and encode them
if("factor" %in% sapply(customers, class)){
customers$Genre <- as.numeric(as.factor(customers$Genre))
}
# Create Age_Category based on age groups
customers$Age_Category <- cut(customers$Age,
breaks = c(-Inf, 30, 40, 50, Inf),
labels = c("0-30", "31-40", "41-50", "50+"))
# Visualize the distribution of Spending Score
ggplot(customers, aes(x = `Spending Score (1-100)`)) +
geom_histogram(bins = 20, fill = "blue", color = "black") +
ggtitle("Distribution of Spending Score") +
xlab("Spending Score") +
ylab("Frequency")
`rlang::last_trace()`
`rlang::last_trace()`
# Load necessary libraries
library(tidyverse)
# Load the dataset
customers <- read.csv("Mall_Customers.csv")
# Rename columns to avoid spaces and special characters
names(customers) <- gsub(" ", "_", names(customers)) # Replace spaces with underscores
names(customers) <- gsub("\\(1-100\\)", "1_to_100", names(customers)) # Replace (1-100) with 1_to_100
names(customers) <- gsub("\\(k\\$\\)", "k", names(customers)) # Replace (k$) with k
# Display the first 5 rows
print(head(customers, 5))
# Calculate and display the number of missing values
num_missing_values <- sum(is.na(customers))
print(paste("Number of missing values:", num_missing_values))
# Encode the 'Genre' column as numeric
customers$Genre <- as.numeric(as.factor(customers$Genre))
# Create Age_Category based on age groups
customers$Age_Category <- cut(customers$Age,
breaks = c(-Inf, 30, 40, 50, Inf),
labels = c("0-30", "31-40", "41-50", "50+"))
# Visualize the distribution of Spending Score
ggplot(customers, aes(x = Spending_Score_1_to_100)) +
geom_histogram(bins = 20, fill = "blue", color = "black") +
ggtitle("Distribution of Spending Score") +
xlab("Spending Score") +
ylab("Frequency")
# Load necessary libraries
library(tidyverse)
# Load the dataset
customers <- read.csv("Mall_Customers.csv")
# Rename columns to avoid spaces and special characters
names(customers) <- gsub(" ", "_", names(customers)) # Replace spaces with underscores
names(customers) <- gsub("\\(1-100\\)", "1_to_100", names(customers)) # Replace (1-100) with 1_to_100
names(customers) <- gsub("\\(k\\$\\)", "k", names(customers)) # Replace (k$) with k
# Display the first 5 rows
print(head(customers, 5))
# Calculate and display the number of missing values
num_missing_values <- sum(is.na(customers))
print(paste("Number of missing values:", num_missing_values))
# Encode the 'Genre' column as numeric
customers$Genre <- as.numeric(as.factor(customers$Genre))
# Create Age_Category based on age groups
customers$Age_Category <- cut(customers$Age,
breaks = c(-Inf, 30, 40, 50, Inf),
labels = c("0-30", "31-40", "41-50", "50+"))
# Visualize the distribution of Spending Score
ggplot(customers, aes(x = Spending_Score_1_to_100)) +
geom_histogram(bins = 20, fill = "blue", color = "black") +
ggtitle("Distribution of Spending Score") +
xlab("Spending Score") +
ylab("Frequency")
# Load necessary libraries
library(tidyverse)
# Load the dataset (assuming it's properly saved as "Mall_Customers.csv")
customers <- read.csv("Mall_Customers.csv", stringsAsFactors = FALSE)
# Check the column names to ensure correct reference
print(names(customers))
# Display the first 5 rows
print(head(customers, 5))
# Calculate the number of missing values
num_missing_values <- sum(is.na(customers))
print(paste("Number of missing values:", num_missing_values))
# Encode the 'Genre' column as numeric if it's a factor (categorical)
customers$Genre <- ifelse(is.factor(customers$Genre), as.numeric(as.factor(customers$Genre)), customers$Genre)
# Create Age_Category based on age groups
customers$Age_Category <- cut(customers$Age,
breaks = c(-Inf, 30, 40, 50, Inf),
labels = c("0-30", "31-40", "41-50", "50+"))
# Visualize the distribution of Spending Score using correct column name referencing
ggplot(customers, aes(x = `Spending Score (1-100)`)) +
geom_histogram(bins = 20, fill = "blue", color = "black") +
ggtitle("Distribution of Spending Score") +
xlab("Spending Score") +
ylab("Frequency")
setwd("~/Desktop/Data_science_tools/week04")
# Load the tidyverse package for data manipulation and visualization
library(tidyverse)
# Load the dataset
cars <- read.csv("Cars.csv")
# Handle missing values
# Assuming missing values should be filled with the mean of their columns
cars <- cars %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Create a new variable 'fuel_efficiency'
cars$fuel_efficiency <- (cars$citympg + cars$highwaympg) / 2
# Obtain summary statistics for key numerical variables
summary_stats <- cars %>%
select(displacement, co2emissions, cylinders, citympg, highwaympg, fuel_efficiency) %>%
summary()
print(summary_stats)
# Explore the distribution of the 'class' variable
class_distribution <- cars %>%
count(class) %>%
ggplot(aes(x = class, y = n, fill = class)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Distribution of Car Classes", x = "Class", y = "Count")
class_distribution
# Plot the relationship between displacement and co2emissions
ggplot(cars, aes(x = displacement, y = co2emissions)) +
geom_point() +
labs(title = "Displacement vs. CO2 Emissions", x = "Displacement", y = "CO2 Emissions")
# Visualize the distribution of co2emissions based on the number of cylinders
ggplot(cars, aes(x = as.factor(cylinders), y = co2emissions, fill = as.factor(cylinders))) +
geom_boxplot() +
labs(title = "CO2 Emissions by Number of Cylinders", x = "Number of Cylinders", y = "CO2 Emissions")
# Interactive plot with Plotly
library(plotly)
# Load the tidyverse package for data manipulation and visualization
library(tidyverse)
# Load the dataset
cars <- read.csv("Cars.csv")
# Handle missing values
# Assuming missing values should be filled with the mean of their columns
cars <- cars %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Create a new variable 'fuel_efficiency'
cars$fuel_efficiency <- (cars$citympg + cars$highwaympg) / 2
# Obtain summary statistics for key numerical variables
summary_stats <- cars %>%
select(displacement, co2emissions, cylinders, citympg, highwaympg, fuel_efficiency) %>%
summary()
print(summary_stats)
# Explore the distribution of the 'class' variable
class_distribution <- cars %>%
count(class) %>%
ggplot(aes(x = class, y = n, fill = class)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Distribution of Car Classes", x = "Class", y = "Count")
class_distribution
# Plot the relationship between displacement and co2emissions
ggplot(cars, aes(x = displacement, y = co2emissions)) +
geom_point() +
labs(title = "Displacement vs. CO2 Emissions", x = "Displacement", y = "CO2 Emissions")
# Visualize the distribution of co2emissions based on the number of cylinders
ggplot(cars, aes(x = as.factor(cylinders), y = co2emissions, fill = as.factor(cylinders))) +
geom_boxplot() +
labs(title = "CO2 Emissions by Number of Cylinders", x = "Number of Cylinders", y = "CO2 Emissions")
# Interactive plot with Plotly
library(plotly)
install.packages("plotly")
# Load the tidyverse package for data manipulation and visualization
library(tidyverse)
# Load the dataset
cars <- read.csv("Cars.csv")
# Handle missing values
# Assuming missing values should be filled with the mean of their columns
cars <- cars %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Create a new variable 'fuel_efficiency'
cars$fuel_efficiency <- (cars$citympg + cars$highwaympg) / 2
# Obtain summary statistics for key numerical variables
summary_stats <- cars %>%
select(displacement, co2emissions, cylinders, citympg, highwaympg, fuel_efficiency) %>%
summary()
print(summary_stats)
# Explore the distribution of the 'class' variable
class_distribution <- cars %>%
count(class) %>%
ggplot(aes(x = class, y = n, fill = class)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Distribution of Car Classes", x = "Class", y = "Count")
class_distribution
# Plot the relationship between displacement and co2emissions
ggplot(cars, aes(x = displacement, y = co2emissions)) +
geom_point() +
labs(title = "Displacement vs. CO2 Emissions", x = "Displacement", y = "CO2 Emissions")
# Visualize the distribution of co2emissions based on the number of cylinders
ggplot(cars, aes(x = as.factor(cylinders), y = co2emissions, fill = as.factor(cylinders))) +
geom_boxplot() +
labs(title = "CO2 Emissions by Number of Cylinders", x = "Number of Cylinders", y = "CO2 Emissions")
# Interactive plot with Plotly
library(plotly)
# Assuming the relationship between fuel_efficiency and co2emissions might be interesting
plot_ly(cars, x = ~fuel_efficiency, y = ~co2emissions, type = 'scatter', mode = 'markers',
marker = list(size = 10, color = 'rgba(255, 182, 193, .9)', line = list(color = 'rgba(152, 0, 0, .8)', width = 2))) %>%
layout(title = "Fuel Efficiency vs. CO2 Emissions",
xaxis = list(title = "Fuel Efficiency"),
yaxis = list(title = "CO2 Emissions"))
